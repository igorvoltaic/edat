@startuml
actor User
participant API
database DB
collections FS
participant Celery
|||
User -> API: Uploads .csv file
API -> FS: Save .csv file into temp directory
API --> User: Return temp file ID
...
User -> API: Temp file ID
API -> FS: Read temp file using standart csv_sniffer
User -> API: CSV Dialect 
API -> FS: Re-read temp file
User -> API: Temp file ID and correct dataset fieldtypes
API -> FS: Re-read temp file
API --> User: Return re-parsed header specification and temp ID
...
FS --> API: Bytes file content
API -> DB: Create Dataset model
DB --> API: Newly created model
API -> DB: Create CsvDialect model
DB --> API: Newly created model
|||
loop each column
    API -> DB: Create Column model
    DB --> API: Newly created model
    |||
end
API -> FS: Copy source file to '/media' directory
API -> FS: Remove temp directory
API --> User: Return Dataset DTO
...
User -> API: Dataset ID
API -> DB: Get Dataset model
DB --> API: Dataset model
API --> FS: Read dataset file
API -> User: Dataset information, dialect and parsed dataset rows
|||
User -> API: POST Plot parameters 
API -> DB: Get Dataset object
API -> DB: Get Plot object by its hash digest
alt Plot hash found
|||
API -> User: Return 'Content-Location' header with the route to plot image
|||
else Plot hash not found
API -> Celery: Assign 'render_plot' task
Celery -> API: return Celery task ID
API -> DB: Update Plot object with recieved Celery task ID
API -> User: Return Celery task ID
|||
end
...
Celery --> FS: Read dataset file
...
Celery --> FS: save plot image
Celery --> DB: rendered plot image path
...
User -> API: Plot render task ID
API -> Celery: Check task state by ID
alt task ready
|||
API -> User: Plot image path 
else
API -> User: Result not ready
|||
end
|||
@enduml
